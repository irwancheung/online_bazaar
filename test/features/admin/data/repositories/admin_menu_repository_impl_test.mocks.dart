// Mocks generated by Mockito 5.4.1 from annotations
// in online_bazaar/test/features/admin/data/repositories/admin_menu_repository_impl_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:online_bazaar/core/network_info.dart' as _i3;
import 'package:online_bazaar/features/admin/data/data_sources/admin_menu_data_source.dart'
    as _i5;
import 'package:online_bazaar/features/admin/domain/repositories/admin_menu_repository.dart'
    as _i6;
import 'package:online_bazaar/features/shared/data/models/menu_item_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMenuItemModel_0 extends _i1.SmartFake implements _i2.MenuItemModel {
  _FakeMenuItemModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> checkConnection() => (super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AdminMenuDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdminMenuDataSource extends _i1.Mock
    implements _i5.AdminMenuDataSource {
  @override
  _i4.Stream<List<_i2.MenuItemModel>> getMenuItems() => (super.noSuchMethod(
        Invocation.method(
          #getMenuItems,
          [],
        ),
        returnValue: _i4.Stream<List<_i2.MenuItemModel>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i2.MenuItemModel>>.empty(),
      ) as _i4.Stream<List<_i2.MenuItemModel>>);
  @override
  _i4.Future<_i2.MenuItemModel> addMenuItem(_i6.AddMenuItemParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMenuItem,
          [params],
        ),
        returnValue: _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #addMenuItem,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #addMenuItem,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.MenuItemModel>);
  @override
  _i4.Future<_i2.MenuItemModel> updateMenuItem(
          _i6.UpdateMenuItemParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMenuItem,
          [params],
        ),
        returnValue: _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #updateMenuItem,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #updateMenuItem,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.MenuItemModel>);
  @override
  _i4.Future<_i2.MenuItemModel> setMenuItemVisibility(
          _i6.SetMenuItemVisibilityParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMenuItemVisibility,
          [params],
        ),
        returnValue: _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #setMenuItemVisibility,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.MenuItemModel>.value(_FakeMenuItemModel_0(
          this,
          Invocation.method(
            #setMenuItemVisibility,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.MenuItemModel>);
  @override
  _i4.Future<String> uploadMenuItemImage(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadMenuItemImage,
          [filePath],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}
